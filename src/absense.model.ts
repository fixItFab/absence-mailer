// Generated by https://quicktype.io

export interface AbsencePayload {
  skip: number;
  limit: number;
  count: number;
  totalCount: number;
  data: Absence[];
}

export interface Absence {
  _id: string;
  doctorsNote: DoctorsNote;
  status: number;
  denyReason: string;
  daysCount: number;
  historical: boolean;
  start: string;
  end: string;
  startDateTime: string;
  endDateTime: string;
  days: DayElement[];
  company: string;
  created: string;
  modified: string;
  reasonId: string;
  documentIds: any[];
  assignedToId: string;
  approverId: string;
  userNotificationIds: any[];
  labelIds?: any[];
  isHourly: boolean;
  canApproveAbsence: boolean;
  forwardHistory: ForwardHistory[];
  reason: Reason;
  assignedTo: AssignedTo;
  substituteId?: string;
  substitute?: Substitute;
  o365EventId?: string;
}

export interface AssignedTo {
  emailIsVerified: boolean;
  hasSetPassword: boolean;
  uiSettings: UISettings;
  vacationDays: number;
  language: string;
  isApprover: boolean;
  canAccessReports: boolean;
  canAccessDPF: boolean;
  canManageTimetracking: boolean;
  canManageFutureTimespans: boolean;
  canManageTimetrackingEntries: boolean;
  hideTimetracking: boolean;
  firstLogin: boolean;
  notes: string;
  inheritHolidays: boolean;
  useSlackForNotifications: boolean | null;
  useEmailForNotifications: boolean;
  o365UserName: null;
  o365ExternalId: null;
  o365Email: null;
  timetrackingInitBalance: number;
  canCreateAbsences: boolean;
  canUpdateAbsences: boolean;
  canDeleteAbsences: boolean;
  _id: string;
  modified: string;
  created: string;
  company: string;
  ident: number;
  email: string;
  firstName: string;
  lastName: string;
  activationHashCreationDate: string;
  avatar: string;
  allowanceInfo: AllowanceInfo[];
  schedules: Schedule[];
  marketingOptIn: boolean;
  calendarSelection?: AssignedToCalendarSelection;
  timeZone?: null;
  employeeId: string;
  employmentStartDate: string;
  employmentEndDate?: string;
  allowancePolicySubscriptions: any[];
  name: string;
  nameByLastname: string;
  recordRights: RecordRights;
  id: string;
  status: number;
  holidayCountryLanguage: string;
  holidaySubregion: string;
  roleId: string;
  holidayIds: string[];
  oauthO365Configured: boolean;
  oauthO365Id: string;
  o365CalendarSyncActivated: boolean;
  teamIds: any[];
  approverId: null;
  locationId: string;
  timetrackingRFID: string;
  timeTrackingRFID: string;
  timetrackingTerminalPictureOnStamp: boolean;
  canManageTimetrackingTerminals: boolean;
  authorizeTerminalsForTimetracking: boolean;
  slackUserId?: null;
}

export interface AllowanceInfo {
  _id: string;
  initialAllowance: number;
}

export interface AssignedToCalendarSelection {
  selectedTeamIds: any[];
  selectedUserIds: any[];
  absentTodaySelected: boolean | null;
  needApprovalSelected: boolean | null;
  allSelected: boolean;
  backgroundStyle: null;
  trace?: any[];
  users?: string[];
  departments?: null;
  locations?: null;
  teams?: null;
  sortBy?: SortBy;
}

export interface SortBy {
  firstName: number;
}

export interface RecordRights {
  read: number;
  write: number;
}

export interface Schedule {
  days: { [key: string]: DayValue }[];
  start: string;
}

export interface DayValue {
  shift: Shift[];
  active: boolean;
}

export interface Shift {
  start: string;
  end: string;
}

export interface UISettings {
  timetracking: Timetracking;
}

export interface Timetracking {
  showDayAbsences: boolean;
  showDayEvents: boolean;
  showEmptyDays: boolean;
}

export interface DayElement {
  value: number;
  holiday: boolean;
  weekend: boolean;
  halfHoliday: boolean;
  mandatoryLeave: boolean;
  date: string;
  startTime: string;
  endTime: string;
  duration: number;
  holidayDayType: number | null;
}

export interface DoctorsNote {
  status: number;
  reminders?: any[];
}

export interface ForwardHistory {
  date: string;
  admin: string;
  action: string;
}

export interface Reason {
  doctorsNote: ReasonDoctorsNote;
  requiresApproval: boolean;
  reducesDays: boolean;
  emailList: any[];
  isPublic: boolean;
  countsAsWork: boolean;
  isHourly: boolean;
  respectsWorkingHours: boolean;
  allowOverlapping: boolean;
  daysNotice: null;
  _id: string;
  company: string;
  name: string;
  modified: string;
  sortIndex: number;
  colorId: string;
  allowanceTypeId: string | null;
  userNotificationIds: any[];
  allowanceHistory: AllowanceHistory[];
  selectableByIds: string[];
}

export interface AllowanceHistory {
  date: string;
  allowanceTypeId: string | null;
}

export interface ReasonDoctorsNote {
  noteRequired: boolean;
  countAllDays: boolean;
  date?: string;
  minDays?: number;
}

export interface Substitute {
  emailIsVerified: boolean;
  hasSetPassword: boolean;
  uiSettings: UISettings;
  vacationDays: number;
  language: string;
  isApprover: boolean;
  canAccessReports: boolean;
  canAccessDPF: boolean;
  canManageTimetracking: boolean;
  canManageFutureTimespans: boolean;
  canManageTimetrackingEntries: boolean;
  hideTimetracking: boolean;
  firstLogin: boolean;
  notes: string;
  inheritHolidays: boolean;
  useSlackForNotifications: boolean;
  useEmailForNotifications: boolean;
  o365UserName: null;
  o365ExternalId: null;
  o365Email: null;
  timetrackingInitBalance: number;
  canCreateAbsences: boolean;
  canUpdateAbsences: boolean;
  canDeleteAbsences: boolean;
  _id: string;
  modified: string;
  created: string;
  company: string;
  ident: number;
  email: string;
  firstName: string;
  lastName: string;
  activationHashCreationDate: string;
  avatar: string;
  employmentStartDate: string;
  allowancePolicySubscriptions: any[];
  allowanceInfo: AllowanceInfo[];
  schedules: Schedule[];
  marketingOptIn: boolean;
  slackUserId: string;
  employeeId: string;
  calendarSelection: SubstituteCalendarSelection;
  name: string;
  nameByLastname: string;
  recordRights: RecordRights;
  id: string;
  status: number;
  holidayCountryLanguage: string;
  holidaySubregion: string;
  roleId: string;
  holidayIds: string[];
  oauthO365Configured: boolean;
  oauthO365Id: string;
  o365CalendarSyncActivated: boolean;
  teamIds: any[];
  approverId: null;
  locationId: string;
  timetrackingRFID: string;
  timeTrackingRFID: string;
  timetrackingTerminalPictureOnStamp: boolean;
  canManageTimetrackingTerminals: boolean;
  authorizeTerminalsForTimetracking: boolean;
  slackTeamName: string;
}

export interface SubstituteCalendarSelection {
  selectedTeamIds: any[];
  selectedUserIds: any[];
  absentTodaySelected: boolean;
  needApprovalSelected: boolean;
  allSelected: boolean;
  backgroundStyle: null;
}
